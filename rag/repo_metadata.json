[
  {
    "path": "ADRs/api-with-abstraction-usecase",
    "type": "source",
    "tech_credit": "Architecture Design Records",
    "tech_credit_description": "Document architectural decisions in a lightweight, structured format to improve traceability, promote team alignment, and support future system evolution. ADRs capture the rationale, context, and alternatives behind design choices, enabling resilient and maintainable architecture."
  },
  {
    "path": "ADRs/configuration-management-usecase",
    "type": "source",
    "tech_credit": "Architecture Design Records",
    "tech_credit_description": "Document architectural decisions in a lightweight, structured format to improve traceability, promote team alignment, and support future system evolution. ADRs capture the rationale, context, and alternatives behind design choices, enabling resilient and maintainable architecture."
  },
  {
    "path": "ADRs/sql-in-dev-usecase",
    "type": "source",
    "tech_credit": "Architecture Design Records",
    "tech_credit_description": "Document architectural decisions in a lightweight, structured format to improve traceability, promote team alignment, and support future system evolution. ADRs capture the rationale, context, and alternatives behind design choices, enabling resilient and maintainable architecture."
  },
  {
    "path": "ArchitectureDesignRecords/Architecture_Design_Records_Ex",
    "type": "source",
    "tech_credit": "Architecture Design Records",
    "tech_credit_description": "Document architectural decisions in a lightweight, structured format to improve traceability, promote team alignment, and support future system evolution. ADRs capture the rationale, context, and alternatives behind design choices, enabling resilient and maintainable architecture."
  },
  {
    "path": "CircuitBreaker/CircuitBreaker.py",
    "type": "source",
    "tech_credit": "Circuit Breaker",
    "tech_credit_description": "Enhance system resilience by dynamically detecting service failures and preventing cascading issues, especially in distributed systems."
  },
  {
    "path": "CircuitBreaker/PyCircuitBreaker.py",
    "type": "source",
    "tech_credit": "Circuit Breaker",
    "tech_credit_description": "Enhance system resilience by dynamically detecting service failures and preventing cascading issues, especially in distributed systems."
  },
  {
    "path": "Iterator/iter_ex.py",
    "type": "source",
    "tech_credit": "Iterator",
    "tech_credit_description": "Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation."
  },
  {
    "path": "MVC/controller.py",
    "type": "source",
    "tech_credit": "Model View Controller",
    "tech_credit_description": "Separate application concerns into three interconnected components: Model for business logic and data, View for user interface, and Controller for input handling. MVC promotes modularity, enabling independent development, testing, and reuse of each component."
  },
  {
    "path": "MVC/main.py",
    "type": "source",
    "tech_credit": "Model View Controller",
    "tech_credit_description": "Separate application concerns into three interconnected components: Model for business logic and data, View for user interface, and Controller for input handling. MVC promotes modularity, enabling independent development, testing, and reuse of each component."
  },
  {
    "path": "MVC/model.py",
    "type": "source",
    "tech_credit": "Model View Controller",
    "tech_credit_description": "Separate application concerns into three interconnected components: Model for business logic and data, View for user interface, and Controller for input handling. MVC promotes modularity, enabling independent development, testing, and reuse of each component."
  },
  {
    "path": "MVC/view.py",
    "type": "source",
    "tech_credit": "Model View Controller",
    "tech_credit_description": "Separate application concerns into three interconnected components: Model for business logic and data, View for user interface, and Controller for input handling. MVC promotes modularity, enabling independent development, testing, and reuse of each component."
  },
  {
    "path": "PlatformAbstractionLayers/BasicAbstractionPatternEx.py",
    "type": "source",
    "tech_credit": "TBD",
    "tech_credit_description": ""
  }
]